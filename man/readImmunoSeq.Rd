% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/readImmunoSeq.R
\name{readImmunoSeq}
\alias{readImmunoSeq}
\title{Read ImmunoSeq files}
\usage{
readImmunoSeq(path, mode="adaptiveV2", recursive = FALSE)
}
\arguments{
\item{path}{Path to the directory containing tab-delimited files.  Only 
files with the extension .tsv are imported.  The names of the data frames are 
the same as names of the files.}

\item{mode}{Mode specifies the type of input file LymphoSeq is reading.
Mode defaults adaptiveV2 if nothing is specified. Avaiable modes include
adaptiveV1, adaptiveV2, adaptiveV3, adaptiveV4, bgiClone}

\item{recursive}{A Boolean value indicating whether tab-delimited files in 
subdirectories should be imported.  If TRUE, then all files in the parent as 
well as the subdirectory are imported.  If FALSE, then only files in the 
parent directory are imported.}
}
\value{
Returns a list of data frames.  The names of each data frame are
assigned according to the original ImmunoSEQ file names.
}
\description{
Imports tab-separated value (.tsv) files exported by the Adaptive 
Biotechnologies ImmunoSEQ analyzer and BGI IR-SEQ and stores them as a list of data frames.
}
\details{
May import tab-delimited files containing antigen receptor 
sequencing from other sources (e.g. miTCR or miXCR) as long as the column 
names are the same as used by ImmunoSEQ files.  Available column headings in 
ImmunoSEQ files are:  

adaptiveV1:

column list:
nucleotide,aminoAcid,count (reads),frequencyCount (%),cdr3Length,vMaxResolved,vFamilyName,
vGeneName,vGeneAllele,vFamilyTies,vGeneNameTies,vGeneAlleleTies,dMaxResolved,dFamilyName,
dGeneName,dGeneAllele,dFamilyTies,dGeneNameTies,dGeneAlleleTies,jMaxResolved,jFamilyName,
jGeneName,jGeneAllele,jFamilyTies,jGeneNameTies,jGeneAlleleTies,vDeletion,n1Insertion,
d5Deletion,d3Deletion,n2Insertion,jDeletion,vIndex,n1Index,dIndex,n2Index,jIndex,
estimatedNumberGenomes,sequenceStatus,cloneResolved,vOrphon,dOrphon,jOrphon,vFunction,
dFunction,jFunction,fractionNucleated,vAlignLength,vAlignSubstitutionCount,
vAlignSubstitutionIndexes,vAlignSubstitutionGeneThreePrimeIndexes,vSeqWithMutations

minimum required columns:
nucleotide,aminoAcid,count (reads),frequencyCount (%), vFamilyName, vGeneName,
dFamilyName, dGeneName, jGeneName, jFamilyName, estimatedNumberGenomes, sequenceStatus

adaptiveV2:

column list:
nucleotide,aminoAcid,count (templates/reads),frequencyCount (%),cdr3Length,vMaxResolved,
vFamilyName,vGeneName,vGeneAllele,vFamilyTies,vGeneNameTies,vGeneAlleleTies,dMaxResolved,
dFamilyName,dGeneName,dGeneAllele,dFamilyTies,dGeneNameTies,dGeneAlleleTies,jMaxResolved,
jFamilyName,jGeneName,jGeneAllele,jFamilyTies,jGeneNameTies,jGeneAlleleTies,vDeletion,
n1Insertion,d5Deletion,d3Deletion,n2Insertion,jDeletion,vIndex,n1Index,dIndex,n2Index,
jIndex,estimatedNumberGenomes,sequenceStatus,cloneResolved,vOrphon,dOrphon,jOrphon,vFunction,
dFunction,jFunction,fractionNucleated,vAlignLength,vAlignSubstitutionCount,vAlignSubstitutionIndexes,
vAlignSubstitutionGeneThreePrimeIndexes,vSeqWithMutations

minimum required columns:
nucleotide,aminoAcid,count (templates/reads),frequencyCount (%), vFamilyName, vGeneName,
dFamilyName, dGeneName, jGeneName, jFamilyName, estimatedNumberGenomes, sequenceStatus


adaptiveV3:

column list:
nucleotide,aminoAcid,count,(templates),frequencyCount,(%),cdr3Length,vMaxResolved,vFamilyName,
vGeneName,vGeneAllele,vFamilyTies,vGeneNameTies,vGeneAlleleTies,dMaxResolved,dFamilyName,dGeneName,
dGeneAllele,dFamilyTies,dGeneNameTies,dGeneAlleleTies,jMaxResolved,jFamilyName,jGeneName,
jGeneAllele,jFamilyTies,jGeneNameTies,jGeneAlleleTies,vDeletion,n1Insertion,d5Deletion,d3Deletion,
n2Insertion,jDeletion,vIndex,n1Index,dIndex,n2Index,jIndex,estimatedNumberGenomes,sequenceStatus,
cloneResolved,vOrphon,dOrphon,jOrphon,vFunction,dFunction,jFunction,fractionNucleated

minimum required columns:
nucleotide,aminoAcid,count (templates),frequencyCount (%), vFamilyName, vGeneName,
dFamilyName, dGeneName, jGeneName, jFamilyName, estimatedNumberGenomes, sequenceStatus


adaptiveV4:

column list:
nucleotide.CDR3.in.lowercase.,aminoAcid.CDR3.in.lowercase.,cloneCount,clonefrequency....,
CDR3Length,vGene,dGene,jGene,vDeletion,d5Deletion,d3Deletion,jDeletion,vdInsertion,
djInsertion,vjInsertion,fuction,CDR3.stripped.x.a

minimum required columns:
nucleotide.CDR3.in.lowercase.,aminoAcid.CDR3.in.lowercase.,cloneCount,clonefrequency....,
vGene,dGene,jGene,fuction

bgiClone:

column list:
nucleotide(CDR3 in lowercase),aminoAcid(CDR3 in lowercase),cloneCount,clonefrequency (%),
CDR3Length,vGene,dGene,jGene,vDeletion,d5Deletion,d3Deletion,jDeletion,vdInsertion,
djInsertion,vjInsertion,fuction

minimum required columns:
nucleotide(CDR3 in lowercase),aminoAcid(CDR3 in lowercase),cloneCount,clonefrequency (%),
vGene,dGene, fuction


}
\examples{
file.path <- system.file("extdata", "TCRB_sequencing", package = "LymphoSeq")

file.list <- readImmunoSeq(path = file.path, 
                           columns = c("aminoAcid", "nucleotide", "count", 
                                     "count (templates)", "count (reads)", 
                                     "count (templates/reads)",
                                     "frequencyCount", "frequencyCount (\%)", 
                                     "estimatedNumberGenomes"), 
                           recursive = FALSE)
}
